import datetime
import json
import uuid
from typing import Union

import diskcache

from DTO.VulnerabilityRequest import VulnerabilityRequest
from DTO.VulnerabilityProcessElement import VulnerabilityProcessElement
from DTO.VulnerabilityQueue import VulnerabilityQueue
from common.dumper import dumper
import service.image_service as manage


# from ..DTO.VulnerabilityRequest import VulnerabilityRequest
# from ..DTO.VulnerabilityProcessElement import VulnerabilityProcessElement
# from ..DTO.VulnerabilityQueue import VulnerabilityQueue
# from ..service.image_service import print_list
# from ..common.dumper import dumper

class VulnerabilityManager:
    def __init__(self):
        self.worker_status = diskcache.Cache(directory='cache/worker_status')

    def queue(
            self,
            imageId: str
    ):
        # list = manage.get_image_list()
        list = manage.print_list()
        images = [i['Name'] for i in list]
        target_image = [i for i in images if i == imageId]

        if len(target_image) == 0:
            return

        queue = VulnerabilityQueue(
            uuid=uuid.uuid4().hex,
            imageId=imageId,
        )

        self.worker_status.set(f"Vulnerability_{queue.uuid}", queue, exprire=3600)

        pass

    def get_queue(self):
        result = []
        for key in self.worker_status.iterkeys():
            if key.startswith("Vulnerability_"):
                print(key)
                vulnerability: VulnerabilityQueue = self.worker_status.get(key=key)

                if vulnerability is not None:
                    self.worker_status.delete(key=key)
                    continue

                result.append({
                    "uuid": vulnerability.uuid,
                    "imageId": vulnerability.imageId
                })

        return json.loads(json.dumps(result, default=dumper))

    def cancel_queue(self, uuid: str):
        self.worker_status.delete(f"Vulnerability_{uuid}")

    def get_vulnerability(self, key) -> Union[dict, None]:
        vulnerability: VulnerabilityQueue = self.worker_status.get(f"Vulnerability_{uuid}")

        if vulnerability is None:
            self.worker_status.delete(key=key)
            return None

        return {
            "uuid": vulnerability.uuid,
            "imageId": vulnerability.imageId
        }

    def edit_queue(self, uuid: str, VulnerabilityRequest: VulnerabilityRequest):
        vulnerability: VulnerabilityQueue = self.worker_status.get(f"Vulnerability_{uuid}")

        if vulnerability is None:
            self.worker_status.delete(key=uuid)
            return None

        for key, value in VulnerabilityRequest.__dict__.items():
            if key == "uuid" or value is None:
                continue

            setattr(vulnerability, key, value)

        self.worker_status.set(f"Vulnerability_{uuid}", vulnerability, exprire=3600)

        pass

    pass
