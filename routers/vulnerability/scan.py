from fastapi import APIRouter, Depends, HTTPException
import service.image_service as manage
from starlette.responses import RedirectResponse, JSONResponse

from DTO.VulnerabilityRequest import VulnerabilityRequest
from DTO.VulnerabilityProcessElement import VulnerabilityProcessElement
from DTO.VulnerabilityQueue import VulnerabilityQueue

from service.VulnerabilityManager import VulnerabilityManager

router = APIRouter()

@router.get("/")
def read_item():
    r_manager = VulnerabilityManager()
    return r_manager.get_list()

@router.get("/{image_id}")
def reservation(image_id: str):
    r_manager = VulnerabilityManager()
    bot = r_manager.get_vulnerability(image_id)

    if bot is None:
        return JSONResponse(status_code=404, content={"message": "Reservation not found"})

    return bot

@router.put("/reservation/{reservation_id}")
def reservation(image_id: str, VulnerabilityRequest: VulnerabilityRequest):
    r_manager = VulnerabilityManager()
    r_manager.edit_queue(image_id, VulnerabilityRequest)
    pass

@router.post("/start_reservation_process")
async def start_reservation_process(VulnerabilityRequest: VulnerabilityRequest):
    r_manager = VulnerabilityManager()
    r_manager.queue(
        imageId=VulnerabilityRequest.imageId
    )
    pass

@router.get("/list_reservation_process")
async def list_reservation_process():
    r_manager = VulnerabilityManager()
    return r_manager.get_queue()