from fastapi import APIRouter, Depends, HTTPException
import service.image_service as manage
from starlette.responses import RedirectResponse, JSONResponse

from DTO.VulnerabilityRequest import VulnerabilityRequest
from DTO.VulnerabilityProcessElement import VulnerabilityProcessElement
from DTO.VulnerabilityQueue import VulnerabilityQueue

from service.VulnerabilityManager import VulnerabilityManager

router = APIRouter()

@router.get("/")
def read_item():
    r_manager = VulnerabilityManager()
    return {"scanList": r_manager.get_list()}

@router.get("/result/{image_id}")
def read_item(image_id: str):
    r_manager = VulnerabilityManager()
    # result_data = r_manager.get_scan_result(image_id)['scan_result']
    # CVEcolums = [
    #     "id",
    #     "VulnerabilityID",
    #     "Severity",
    #     "PkgName",
    #     "InstalledVersion",
    #     "Description",
    # ]
    # # result_data 에서 CVEcolums 만 추출
    # result_data = [{key: value for key, value in data.items() if key in CVEcolums} for data in result_data]
    # return {"scanResult": result_data}
    return {"scanResult": r_manager.get_scan_result(image_id)['scan_result']}

@router.get("/list_reservation_process")
def list_reservation_process():
    r_manager = VulnerabilityManager()
    return {"QueueList": r_manager.get_queue()}

@router.get("/{image_id}")
def reservation(image_id: str):
    r_manager = VulnerabilityManager()
    bot = r_manager.get_vulnerability(image_id)

    if bot is None:
        return JSONResponse(status_code=404, content={"message": "Reservation not found"})

    return bot

@router.post("/start_reservation_process")
async def start_reservation_process(VulnerabilityRequest: VulnerabilityRequest):
    r_manager = VulnerabilityManager()
    r_manager.queue(
        imageId=VulnerabilityRequest.imageId
    )
    pass